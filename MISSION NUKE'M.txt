When the enemies understand that their cyberattacks have failed miserably, they will send a
number of troops of their most vicious combatants. Each of their troops will be deployed over the
course of N hours such that there will be exactly one hour between each troop’s arrival. We denote
the arrival function as E(t), where E(t) is the number of enemy soldiers arriving at hour t. Thanks
to your superior hacking skills, while fending off the cyberattacks, you will have hacked into their
system and captured their troop deployment schedule stored in troopsDeploymentSchedule.dat
as an array of integer numbers separated by a space (e.g.: 3 10 10 6 6). This file will be given as the
third command line argument. An example how to interpret such a schedule is given below.

			+---------------------+
HourOfAttack (t)        | 1 |  2 |  3 | 4 | 5 |
			+---------------------+
#OfEnemiesArriving E(t) | 3 | 10 | 10 | 6 | 6 |
			+---------------------+

The given example schedule can be interpreted as follows: one hour into the attack, the first troop with
3 soldiers will arrive. The second troop will arrive one hour later and will consist of 10 soldiers, etc.

The best weapon at our disposal for this kind of an attack is a huge Marauder II BattleMech that carries a massive Blackwell Arms Thunderfist Heavy Gauss Rifle. The gauss rifle can
be very powerful and destroy a large number of enemies, but
depending on the amount of time it has been allowed to charge. The power P(i) is measured in
the amount of enemy soldiers it can destroy with a single shot, and it can be calculated using this
formula: P(i) = i^2 , where i is the number of hours it was allowed to recharge.

			+----------------------+
ChargingTimeInHours (i)  | 1 | 2 | 3 |  4 |  5 |
			+----------------------+
#OfEnemiesItCanKill P(i) | 1 | 4 | 9 | 16 | 25 |
			+----------------------+


More specifically, if the rifle is used in the i'th hour and j hours have passed since the previous
discharge, then it can kill at most min[E(i), P(j)] enemy soldiers, after which the rifle will be completely drained and will have to recharge for at least one hour before it can be fired again. Note
that only enemies arriving at that specific hour can be killed, any remaining enemies
not killed in previous hours will have taken the cover.
You can assume that the rifle is completely drained at the very beginning (hour 0) of the attack.
It can’t be used earlier than hour 1 of the attack (exactly when the first enemy troop arrives), and
if it is used in the i'th hour for the first time, it can kill up to P(i) enemy soldiers.
For the given example enemy deployment schedule, the optimal solution would be to fire the
rifle at hours 3 and 5, for a total enemy kill count of 13. If the rifle is activated in the first hour
it can only kill one enemy soldier, and if it is activated in the second hour for the first time it
can only kill 4 enemies even though 10 enemy soldiers are deployed, because the charging time was
only 2 hours (P(2) = 2^2 = 4). By activating the rifle in hours 3 and 5, we can obtain a total of
{min[E(3) = 10, P(3) = 9] + min[E(5) = 6, P(5 − 3) = P(2) = 4]} = 13
As you can see, this optimization problem is computationally very complex to use a brute force
approach in order to solve it. Any combination of hours at which the rifle is activated can be a
potential optimal solution, and if we were to check each possibility, there would be 2^N − 1 possible
rifle usages to inspect for N hours of attack. An example for N = 3 would lead into inspection of
seven sets of hours for firing: {1}, {2}, {3}, {1, 2}, {1, 3}, {2, 3}, {1, 2, 3}, which would lead to a terrible
exponential computational complexity as N grows. You will implement the dynamic programming
approach given in Algorithm 2 to solve the problem with a better time complexity.

Algorithm 2 Optimal Defense Solution Dynamic Programming
1: procedure GetOptimalDefenseSolutionDP
2: SOL(0) ← 0
3: HOURS(0) ← []
4: for j← 1, . . . , N do
5: SOL(j) ← max for all (0<=i<j) [(SOL(i) + min[E(j), P(j−i)]]
6: HOURS(j) ← [HOURS(i), j]
7: end for
8: return SOL, HOURS
9: end procedure

The dynamic programming approach suggested in the given pseudocode works as follows: At
each hour j, check already stored optimal solutions for each hour i from 0 to j − 1 (0 ≤ i < j).
If the attack ends at hour j, there is no reason not to fire the rifle at hour j as we don’t have to
save the charge for any future enemy arrivals. Therefore, the optimal solution at any hour j will
be the maximum of all solutions over the hour interval (0 ≤ i < j) given as the recurrence relation
SOL(j) ← max0<=i<j [(SOL(i) + min[E(j), P(j−i)]]; i.e., the maximum number of soldiers killed at
hour i plus the number of soldiers that can be killed at most at hour j with the rifle charged for
(j − i) hours, which is min[E(j), P(j−i)]. A visualization of this reasoning is given below for hour 5.